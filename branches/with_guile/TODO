TODO of GNU Chess

  Copyright (C) 2001-2017 Free Software Foundation, Inc.

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

This TODO list is specifically intended to include tasks related to
the 'with_guile' branch.

Without Guile                           With Guile
--------------------------------------------------------------------------------
                                        const board_t *board_tmp;
int eval( board_t *board )              SCM eval_builtin( void )
{                                       {
                                          const board_t *board = board_tmp;
  // ...                                  // ...
  return eval;                            return scm_from_int( eval );
}                                       }
                                        int eval( board_t *board )
                                        {
                                          board_tmp = board;
                                          int ret_val;
                                          ret_val = scm_call_0( func_eval_guile );
                                          return scm_num2int( ret_val, 0, NULL );
                                        }
--------------------------------------------------------------------------------

Next steps:
* Split eval_builtin into small primitives available from Guile, such that
the weight is assigned in Scheme, not in C++.
* Split material_get_info and material_comp_info into primitives.
* Add a primitive that returns the board position in one of the standard formats, e.g. FEN. This would be suitable for an arbitrary Scheme evaluation function.
* Genetic algorithms.

Stages for a user-defined evaluation function based on Guile:
1. Parameterized evaluation function. Evaluation function with exactly the same structure as the built-in evaluation function.
  Eval function:
    Written in C++, not in Scheme.
    All weights must be variables instead of constants.
  Scheme primitives:
    A couple of primitives to get and set the parameters of the evaluation function.
    A way to select either the parameterized or the built-in evaluation function.
2. User-defined evaluation function with primitives to evaluate atomic evauable things.
  Eval function:
    Written in Scheme.
    Following the same structure as the built-in evaluation function.
  Scheme primitives:
    A primitive for each evauable thing: material, patterns, etc.
3. Arbitrary user-defined evaluation function.
  Eval function:
    Written in Scheme.
    Arbitrary structure.
  Scheme primitives:
    Current game position in FEN, PGN or other notation method.

